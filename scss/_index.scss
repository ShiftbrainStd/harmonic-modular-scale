// Harmonic Modular Scale

@use "sass:list";
@use "sass:meta";
@use "helpers";

$scale-factor: 8 !default;
$base-font-size: 1rem !default;
$line-height-unit: 0.25rem !default;
$use-calc: true !default;

@function get-sizes($font-size-degree, $line-height-degree: null) {
  @if meta.type-of($font-size-degree) == list {
    $line-height-degree: list.nth($font-size-degree, 2);
    $font-size-degree: list.nth($font-size-degree, 1);
  }

  $font-size-degree: helpers.trunc($font-size-degree);
  $fs-n: $scale-factor;
  $fs-d: $scale-factor - $font-size-degree;

  @if $font-size-degree == 0 {
    $font-size: $base-font-size;
  } @else if $use-calc {
    $font-size: calc(#{$base-font-size} * #{$fs-n} / #{$fs-d});
  } @else {
    $font-size: $base-font-size * $fs-n / $fs-d;
  }

  $sizes: ($font-size);

  @if meta.type-of($line-height-degree) == number {
    $sizes: list.append(
      $sizes,
      sizes-lh(
        $font-size-degree: $font-size-degree,
        $line-height-degree: $line-height-degree,
        $as-line-height: true,
      )
    );
  }

  @return $sizes;
}

/// Returns the line-height value related
/// to the font size in scale based on harmonic progression.
///
/// @param {number} $font-size-degree [0] - The position of font size in scale relative to the base font size. It must be an integer.
/// @param {number} $line-height-degree [0] - The increments of line height relative to the minimum height that can contain the current font size. It must be an integer.
/// @param {number} $lines [1] - The number to multiply the line height.
/// @param {boolean} $as-line-height [false] - If true, returns the value relative to the current font-size. If not, returns the value relative to the root font size.
@function sizes-lh(
  $font-size-degree,
  $line-height-degree: null,
  $lines: 1,
  $as-line-height: false
) {
  @if meta.type-of($font-size-degree) == list {
    @if list.length($font-size-degree) == 3 {
      $lines: list.nth($font-size-degree, 3);
    }

    @if list.length($font-size-degree) == 2 and $line-height-degree {
      $lines: $line-height-degree;
    }

    $line-height-degree: list.nth($font-size-degree, 2);
    $font-size-degree: list.nth($font-size-degree, 1);
  }

  $font-size-degree: helpers.trunc($font-size-degree);
  $line-height-degree: helpers.trunc($line-height-degree);
  $lines: helpers.trunc($lines);
  $fs-n: $scale-factor;
  $fs-d: $scale-factor - $font-size-degree;
  $font-size: $base-font-size * $fs-n / $fs-d;
  $base-line-height-multiple: 1;

  @while $line-height-unit * $base-line-height-multiple < $font-size {
    $base-line-height-multiple: $base-line-height-multiple + 1;
  }

  $lh-n: ($base-line-height-multiple + $line-height-degree) * $fs-d;
  $lh-d: ($base-font-size / $line-height-unit) * $fs-n;

  @if $as-line-height {
    @if $lh-n == $lh-d {
      @return 1;
    }

    @if $use-calc {
      @return calc(1em * #{$lh-n} / #{$lh-d});
    }

    @return $lh-n / $lh-d;
  }

  @if $use-calc {
    @if $lh-n == $lh-d {
      @if $fs-n == $fs-d {
        @return $base-font-size * $lines;
      }

      @if $lines != 1 {
        @return calc(#{$base-font-size} * #{$fs-n} / #{$fs-d} * #{$lines});
      }

      @return calc(#{$base-font-size} * #{$fs-n} / #{$fs-d});
    }

    @if $fs-n == $fs-d {
      @if $lines != 1 {
        @return calc(#{$base-font-size} * #{$lh-n} / #{$lh-d} * #{$lines});
      }

      @return calc(#{$base-font-size} * #{$lh-n} / #{$lh-d});
    }

    @if $lines != 1 {
      @return calc(
        #{$base-font-size} * #{$fs-n} / #{$fs-d} * #{$lh-n} / #{$lh-d} * #{$lines}
      );
    }

    @return calc(
      #{$base-font-size} * #{$fs-n} / #{$fs-d} * #{$lh-n} / #{$lh-d}
    );
  }

  @return $font-size * $lh-n / $lh-d * $lines;
}

/// Sets font-size in type scale based on harmonic progression
///   and line-height based on vertical grid
///
/// @param {number} $font-size-degree [0] - The position of font size in scale relative to the base font size. It must be an integer.
/// @param {number} $line-height-degree [null] - The increments of line height relative to the minimum height that can contain the current font size. It must be an integer.
/// @example
///   h1 {
///     @include sizes(3, 2);
///   }
/// @output
///   h1 {
///     font-size: calc(1rem * 8 / 5);
///     line-height: calc(1em * 45 / 32);
///   }
@mixin sizes($font-size-degree, $line-height-degree: null) {
  $sizes: get-sizes($font-size-degree, $line-height-degree);

  font-size: list.nth($sizes, 1);
  @if list.length($sizes) == 2 {
    line-height: list.nth($sizes, 2);
  }
}
