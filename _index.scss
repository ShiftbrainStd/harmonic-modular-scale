// Harmonic Modular Scale

@import "helpers";

$hms-scale-factor: 8;
$hms-base-font-size: 1rem;
$hms-line-height-unit: 0.25rem;
$hms-use-calc: false;

// Sets font-size in type scale based on harmonic progression
//   and line-height based on vertical grid
// @param {number} $font-size-degree [0] - The position of font size in scale relative to the base font size. It must be an integer.
// @param {number} $line-height-degree [null] - The increments of line height relative to the minimum height that can contain the current font size. It must be an integer.
// @example
//   h1 {
//     @include hms-sizes(3, 2);
//   }
// @output
//   h1 {
//     font-size: calc(1rem * 8 / 5);
//     line-height: calc(1em * 45 / 32);
//   }
@mixin hms-sizes($font-size-degree: 0, $line-height-degree: null) {
  $font-size-degree: trunc($font-size-degree);
  $fs-n: $hms-scale-factor;
  $fs-d: $hms-scale-factor - $font-size-degree;

  @if $font-size-degree == 0 {
    font-size: $hms-base-font-size;
  } @else if $hms-use-calc {
    font-size: calc(#{$hms-base-font-size} * #{$fs-n} / #{$fs-d});
  } @else {
    font-size: $hms-base-font-size * $fs-n / $fs-d;
  }

  @if type-of($line-height-degree) == number {
    line-height: hms-sizes-lh($font-size-degree, $line-height-degree, $hms-use-calc, $as-line-height: true);
  }
}

// Returns the line-height value that related to
//   the font size in scale based on harmonic progression.
// @param {number} $font-size-degree [0] - The position of font size in scale relative to the base font size. It must be an integer.
// @param {number} $line-height-degree [0] - The increments of line height relative to the minimum height that can contain the current font size. It must be an integer.
// @param {boolean} $use-calc [$hms-use-calc] - If the value uses calc() function or not.
// @param {boolean} $as-line-height [false] - If true, returns the value relative to the current font-size. If not, returns the value relative to the root font size.
@function hms-sizes-lh ($font-size-degree: 0, $line-height-degree: 0, $use-calc: $hms-use-calc, $as-line-height: false) {
  $font-size-degree: trunc($font-size-degree);
  $line-height-degree: trunc($line-height-degree);
  $fs-n: $hms-scale-factor;
  $fs-d: $hms-scale-factor - $font-size-degree;
  $font-size: $hms-base-font-size * $fs-n / $fs-d;
  $base-line-height-multiple: 1;

  @while $hms-line-height-unit * $base-line-height-multiple < $font-size {
    $base-line-height-multiple: $base-line-height-multiple + 1;
  }

  $lh-n: ($base-line-height-multiple + $line-height-degree) * $fs-d;
  $lh-d: ($hms-base-font-size / $hms-line-height-unit) * $fs-n;

  @if $as-line-height {
    @if $lh-n == $lh-d {
      @return 1;
    } @else if $use-calc {
      @return calc(1em * #{$lh-n} / #{$lh-d});
    } @else {
      @return $lh-n / $lh-d;
    }
  } @else {
    @if $lh-n == $lh-d and $fs-n == $fs-d {
      @return $hms-base-font-size;
    } @else if $use-calc {
      @if $lh-n == $lh-d {
        @return calc(#{$hms-base-font-size} * #{$fs-n} / #{$fs-d});
      } @else if $fs-n == $fs-d {
        @return calc(#{$hms-base-font-size} * #{$lh-n} / #{$lh-d});
      } @else {
        @return calc(#{$hms-base-font-size} * #{$fs-n} / #{$fs-d} * #{$lh-n} / #{$lh-d});
      }
    } @else {
      @return $font-size * $lh-n / $lh-d;
    }
  }
}
